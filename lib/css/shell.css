@import url(./fonts.css);
@import url(./shell-general-layout.css);

.ui_layout_select {
    display: block;
}

/**
 * Using .typeroof-ui as the class for containers within which the
 * elements will be treated as typeroof ui components. Especially
 * for the styling general html-elements (h1, h2, ...).
 */
.typeroof-ui :is(h1, h2, h3, h4, h5, h6){
    margin-block-start: var(--gap-size);
    margin-block-end: var(--gap-size);
}
.typeroof-ui :is(ol, ul) {
    margin-block-start: var(--gap-size);
    margin-block-end: var(--gap-size);
}
/* No margin for nested lists. */
.typeroof-ui :is(ol, ul) :is(ul, ol) {
    margin-block-start: 0;
    margin-block-end: 0;
}

.key_moments_timeline-items {
    list-style: none;
    padding: 0;
}

.active > .key_moments_timeline-button {
    font-weight: 700
}

.ui_time_control_circle{
  touch-action: none;
  width: 200px;
  height: 200px;
}

.ui_time_control_circle-track {
    fill: oklch(.95 .05 calc(1turn * var(--t)));
    stroke: black;
    stroke-width: 2;
}
.ui_time_control_circle-track_back{
    fill: var(--gap-color);
}
.ui_time_control_circle-hand {
    stroke: black;
    stroke-width: 2;
    fill: oklch(.9 .2 calc(1turn * var(--t)));
}

.ui_time_control_circle-key_moments > * {
    fill: black;
}
.ui_time_control_circle-key_moments > .active {
    fill: red;
}
.ui_time_control_circle-key_moments :hover {
  stroke: black;
  stroke-width: 7;
  stroke-opacity: .3;
  /* paint the stroke under the fill*/
  paint-order: stroke;
}

.stage_and_actors {
    /* It's important, that the inner size of the stage has
     * the exact width/height dimensions.
     */
    box-sizing: content-box;
    border: var(--gap-size) solid var(--gap-color, black);
    border-inline-start-width: 0;
}
.stage_and_actors-wrapper {
    position: relative;
    overflow: hidden;
}

.stage_and_actors-wrapper:before {
  content: "";
  display: block;
  position: absolute;
  z-index: 0;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-size: var(--transparency-indicator-bg-size);
  background-image: var(--transparency-indicator-bg-image);
}

.stage_and_actors-wrapper > .stage_and_actors-layer-top {
  width: 100%;
  height: 100%;
  position: absolute;
  left: 0;
  top: 0;
  z-index: 0;
}

.stage_and_actors-layer-sub {
    position: absolute;
    overflow: visible;
}

.actor_renderer-line_of_text {
    display: block;
    white-space: pre;

    height: inherit;
    width: inherit;
}

.stage_and_actors-layer > svg circle {
}

.stage-manager_actors li.active > button span {
    font-weight: 700;
}

.ui_toggle_key_moment_button.active {
    font-weight: 700;
}

ol.ui_zone-key_moments_main {
    padding: 0;
    list-style:inside square;
}

.ui_zone-key_moments_main .ui_key_moment_controller:nth-child(odd){
    background: var(--list-item-odd-bg);
}
.ui_zone-key_moments_main .ui_key_moment_controller:nth-child(even){
    background: var(--list-item-even-bg);
}

li.ui_key_moment_controller.active:not(:last-child) {
    border-bottom: var(--gap-size) solid var(--gap-color);
    margin-bottom: 1em;
    padding-bottom: 1em;
}

.stage-manager_actors{
    margin-bottom: 1em;
}
.stage-manager_actors ol {
    list-style: none;
    padding-inline-start: 0;
}

.stage-manager_actors > ol {
    padding-inline-start: 0;
}

.ui_font-select{
    display: block;
}
.ui_font-select_select {
  max-width: 15em;
}

.ui_actor_time_control_circle {
    width: 75px;
    height: 75px;
}

.ui_actor_time_control_circle :is(
    .ui_time_control_circle-track
  , .ui_time_control_circle-hand
) {
    stroke-width: 5;
}

.stage-manager_actors * {
    --indicator-padding: .2em;
    --drop-indicator-color: #333;
    --indentation-width: .7em;
}

.stage-manager_actors > ol:empty::before {
  display: block;
  content: "(empty: drop actor here)";
  background-color: var(--list-item-odd-bg);
}

.stage-manager_actors li.odd-row {
    --background-base-color: var(--list-item-odd-bg);
    background: var(--list-item-odd-bg);
}

.stage-manager_actors > ol,
.stage-manager_actors li.even-row {
    --background-base-color: var(--list-item-even-bg);
    background: var(--list-item-even-bg);
}

.stage-manager_actors li:last-child > ol {
    /* Only for layer (container) items
     * This way there's a drop zone to insert the drop after the li.
     */
    padding-bottom: .1em;
}

.stage-manager_actors li {
    padding: calc(var( --indicator-padding) * 0.5) 0 calc(var(--indicator-padding) * 0.5) 0;
}

.stage-manager_actors li > :first-child {
    margin-inline-start: calc(var(--indentation-width, 1em) * var(--structural-depth, 0));
}

.stage-manager_actors li.drop_target_indicator-before,
.stage-manager_actors li.drop_target_indicator-after {
    background-position: calc(var(--indentation-width, 1em) * var(--structural-depth, 0)) 0;
    background-size: 10em auto;
    background-repeat: no-repeat;
}
.stage-manager_actors li.drop_target_indicator-before {
    padding: var( --indicator-padding) 0 0 0;
    background-image: linear-gradient(
        to bottom,
        var(--drop-indicator-color) var(--indicator-padding),
        var(--background-base-color) var(--indicator-padding)
    );
}

.stage-manager_actors li.drop_target_indicator-after {
    padding: 0 0 var( --indicator-padding) 0;
    background-image: linear-gradient(
        to top,
        var(--drop-indicator-color) var(--indicator-padding),
        var(--background-base-color) var(--indicator-padding)
    );
}

.stage-manager_actors .drop_target_indicator-after:last-child  {
    padding: calc(var( --indicator-padding) * 0.5) 0 var(--indicator-padding) 0;
}

.stage-manager_actors ol:empty::after,
.stage-manager_actors .drop_target_indicator-insert::after {
    display: block;
    content: "";
    margin-left: calc(var(--indentation-width, 1em) * (1 + var(--structural-depth, 0)));
    padding: var(--indicator-padding) 0;
}

.stage-manager_actors ol:not(.drop_target_indicator-insert):empty::after {
    background: var(--background-base-color);
}
.stage-manager_actors .drop_target_indicator-insert::after {
    background-image: linear-gradient(
        to top,
        var(--drop-indicator-color) var(--indicator-padding),
        var(--background-base-color) var(--indicator-padding)
    );
    background-size: 10em auto;
    background-repeat: no-repeat;
}

.stage-manager_actors li > * {
    vertical-align: middle;
}

.drag_handle{
    display: inline-block;
    background: #aaa;
    padding: 0 .3em;
    border: 1px outset lightgrey;
}

.waste_basket_drop_target {
    display: block;
}

.waste_basket_drop_target-main_drop_zone{
    display: inline-block;
}
.waste_basket_drop_target-main_drop_zone::after {
    content: "🗑️";
    font-size: 2em;
}
.waste_basket_drop_target-receptive .waste_basket_drop_target-main_drop_zone{
    background: lightyellow;
    outline: .2em solid grey;
}

.ui_color_component {
  /*
   * width: 1em;
   * height: 1em;
   */
}
.ui_color_patch {
    position: relative;
    --width: 1.5em;
    --height: 1.3em;
    width: var(--width);
    height: var(--height);
    overflow: visible;
}

.ui_color_patch-has_color:after,
.ui_color_patch-has_color:before {
    display:block;
    content: '';
    width: var(--width);
    height: var(--height);
    position: absolute;
    left: 0;
    top: 0;

}

.ui_color_patch-has_color:hover:after {
    --hover-size: 7rem;
    min-width: var(--hover-size);
    height: var(--hover-size);
    left: calc((-1 * var(--hover-size) / 2) + (var(--width) / 2));
    top: calc((-1 * var(--hover-size) / 2) + (var(--height) / 2));
    border-radius: calc(var(--hover-size)/2);
}

.ui_color_patch-has_color:after {
    z-index: 1;
    background-color: var(--color);
}

.ui_color_patch-has_color:before {
    z-index: 0;
    background-size: var(--transparency-indicator-bg-size);
    background-image: var(--transparency-indicator-bg-image);
}


.ui_color_patch-no_color:before{
    content: '❌';
}

.common_actor_properties-list {
    padding: 0;
    list-style: inside none;
}

.common_actor_properties-item:nth-child(even) {
    background: var(--list-item-even-bg);
}
.common_actor_properties-item:nth-child(odd) {
    background: var(--list-item-odd-bg);
}

.common_actor_properties-value {
    font-weight: bold;
}

.common_actor_properties-value-color_patch {
    display: inline-block;
}

.common_actor_properties-value-text {
    text-overflow: ellipsis;
    overflow: hidden;
    max-width: 100%;
    white-space: nowrap;
    display: inline-block;
    vertical-align: bottom;
}

.common_actor_properties-value-text:hover {
    text-overflow: ellipsis;
    overflow: initial;
    white-space: initial;
    display: initial;
}

.ui_color_chooser-label_toggle {
    display: list-item;
    list-style-type: disclosure-closed;
}

.ui_color_chooser.settings_visible .ui_color_chooser-label_toggle {
    list-style-type: disclosure-open;
}



.ui_color_chooser .ui_color_patch {
    display: inline-block;
    margin-left: .5em;
    vertical-align: baseline;
}


.ui_color_component {
    display: grid;
    grid-template-columns: auto auto;
    grid-template-rows: auto;
    grid-template-areas:  "value-box toggle"
                          "color-bar color-bar";
}


.ui_color_component > .ui_toggle_button {
    grid-area: toggle;
    justify-self: end;
}

.ui_color_component >.number-and-range-input_value-box {
    grid-area: value-box;
}

.ui_color_component > .number-and-range-input_color-bar {
    grid-area: color-bar;
}

.number-and-range-input_color-bar:before {
  content: "";
  display: block;
  position: absolute;
  z-index: 0;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-size: var(--transparency-indicator-bg-size);
  background-image: var(--transparency-indicator-bg-image);
}

.number-and-range-input_color-bar {
    position: relative;
    display: flex;
    justify-content: center;
    height: 3rem;
}
.number-and-range-input_color-bar input{
    width: 100%;
    width: -moz-available;          /* WebKit-based browsers will ignore this. */
    width: -webkit-fill-available; /* Mozilla-based browsers will ignore this. */
    width: fill-available;
    position: relative;
    z-index: 1;
}
.number-and-range-input_color-bar canvas {
    width: var(--width, 0);
    height: var(--height, 0);
    /*
     * important, canvas in this element must not change the container height
     * width and height will be set in javascript to cover all of the container.
     */
    position: absolute;
    z-index: 0;
    top: 0;
    left: 0;
}

.number_and_range_input input[type=number]{
    max-width: 10ex;
}

.ui_select_task_automation .ui_plain_select-label {
    display: block;
}

.measure_box {
    position: absolute;
    top: -100px; /* hide off-screen*/
    /* rather use 1px, so there is no shortcut optimization that
     * prevents measuring the content.
     */
    width: 1px;
    height: 1px;
    overflow: hidden;
}
.measure_box-sample {
    white-space: nowrap;

}
